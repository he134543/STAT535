a = 0.5
alpha = (a-mu)/std
p_alpha =  1/sqrt(2*pi) * exp(-0.5*alpha) # probability density function at alpha
c_alpha = 0.5 * (1 + erf(alpha/sqrt(2))) # cumulative distribution function at alpha
Z = 1 - c_alpha
trunc_E = mu + std * p_alpha/(Z) # mean
trunc_std = std^2 * (1 + alpha * p_alpha/Z - (p_alpha/Z)^2) # variation
print(trunc_E)
print(trunc_std)
print(mean(trunc_s))
print(std(trunc_s))
library(truncnorm)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed', lwd = 3)
library(truncnorm)
s2 = rtruncnorm(10000, a = 0.5, b = Inf)
mean_s2 = mean(s2)
std_s2 = std(s2)
print(mean_s2)
print(std_s2)
# Calculated from the sample
print(mean(trunc_s))
print(std(trunc_s))
# Calculated from Equation
print(trunc_E)
print(trunc_std)
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.0001
abs(mean_s2 - mean_trunc_sample) < tolerence
a = rnorm(100)
b = rnorm(100)
mean(a)
mean(b)
a <- function(s){
len = length(s[s >= 0.3])
print(len)
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
a(s1)
a(s2)
a(s3)
vector1 <- c("5", "12", "7", "32")
max(vector1)
sort(vector1)
# sum(vector1)
utf8ToInt('1')
utf8ToInt("7")
vector2 <- c("5",7,12)
#vector2[2] + vector2[3]
list4 <- list(z1="6", z2=42, z3="49", z4=126)
list4[[2]]+list4[[4]]
#list4[2]+list4[4]
typeof(list4[2])
n = 100
X = rep(1:n, each = 3)
Y = 0.5 + 2 * X + rnorm(100 * 3)
reg_Y_X = lm(Y ~ X)
coefs = coef(reg_Y_X)
y_predict = predict(reg_Y_X)
print(summary(reg_Y_X))
attributes(reg_Y_X)
is.numeric(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$effects)
reg_Y_X$fitted.values
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
#lines(x, dnorm(x), col = 'pink')
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
# lines(x, dnorm(x), col = 'pink')
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
#lines(x, theoretical_density, col = 'red')
lines(x, dnorm(x), col = 'red')
help(dnorm)
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
library(ggplot2)
install.packages("ggplot2")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("lubridate")
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("ggplot2")
library(tidyverse)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMassachusetts/2022Fall_Courses/Statistical_computing/FP/STAT535")
# install.packages("dataRetrieval")
library(dataRetrieval)
suppressMessages(library(tidyverse))
library(dataRetrieval)
library(dplyr)
library(ggplot2)
# Define function to get discharge timeseries
get_discharge_data <- function(site_no, q_code, start, end) {
# Build the url link
url <- paste0('https://waterdata.usgs.gov/nwis/dv?cb_',
q_code,
'=on&format=html&site_no=',
site_no,
'&legacy=&re[â€¦]module=sw&period=&begin_date=',
start,
'&end_date=',
end)
q_data <- readLines(url)
# Select lines which contains the data
table_pattern <- '<tr align="center"><td nowrap="nowrap">'
q_table <- str_subset(q_data, table_pattern)
# Extract dates and flow(ft3/s) from each line
dates = as.Date(unlist(str_match_all(q_table, "[0-9]*/[0-9]*/[0-9]*")), "%m/%d/%Y")
flows = unlist(str_match_all(q_table, "<span>.*</span>"))
flows = as.numeric(str_replace_all(flows, "</?span>", ""))
# Put dates and flow together as a matrix
Q_df = data.frame(
Date = dates,
Qobs = flows
)
return(Q_df)
}
get_drainage_area = function(site_no){
# Scrape the drainage area
url2 <- paste0('https://waterdata.usgs.gov/nwis/inventory/?site_no=',
site_no,
'&agency_cd=USGS')
d_data <- readLines(url2)
d_pattern <- "^.*Drainage area"
d_line <- str_subset(d_data,d_pattern)
darea <- unique(unlist(str_extract_all(d_line, "[0-9]*\\.?[0-9]*")))[2]
darea <- as.numeric(darea)
return(darea)
}
# Specify the inputs: gauge number, q_code is fixed, start date and end date
site_no <- '08324000'
q_code <- '00060'
start <- '2000-01-01'
end <- '2020-12-31'
# Use the function we have to scrape
q_df <- get_discharge_data(site_no, q_code, start, end)
# Get authentic streamflow data using the package
validate_q <- readNWISdv(siteNumber = site_no, parameterCd = q_code,
start, end)
# Calculate the error between scraped data and the true data
scrape_error = q_df$Qobs - validate_q$X_00060_00003
plot(q_df$Date, scrape_error)
# Note: not all the site have a validate
# 0 drainage area meant no data avaliable
gauges_area = read.csv("drainage_area.txt", colClasses = c("character", "numeric"))
# Filter gauges which do not have the drainage area data
gauges_area <- gauges_area %>%
filter(drainage_area > 0)
gauges_area
# Note: not all the gauges have enough streamflow data
site_list <- character()
Q5s <- numeric()
Q50s <- numeric()
Q95s <- numeric()
for (site_no in gauges_area$site_no){
flow_df <- read.csv(paste0("streamflows/",
site_no, ".csv")
)
# check how many data in the data
if (nrow(flow_df) <= 15 * 365){
# if less 2 years data were scraped
# go to next gauge
print(paste0("Less than 2 years in the site:", site_no))
}else{
# more than 2 years data were scraped
# the gauge would be saved into the site_list
# save the site no
site_list = c(site_list, site_no)
# Calculate the statistics
Q5 = unname(quantile(x = flow_df$Qobs, probs = c(.95), na.rm = TRUE))
Q50 = unname(quantile(x = flow_df$Qobs, probs = c(.5), na.rm = TRUE))
Q95 = unname(quantile(x = flow_df$Qobs, probs = c(.05), na.rm = TRUE))
# save the statistics
Q5s = c(Q5s, Q5)
Q50s = c(Q50s, Q50)
Q95s = c(Q95s, Q95)
}
}
# The dataframe is based on the gauge area dataframe
Q_A_df = gauges_area %>%
filter(site_no %in% site_list) %>%
mutate(Q5 = Q5s) %>%
mutate(Q50 = Q50s) %>%
mutate(Q95 = Q95s)
Q_A_df = drop_na(Q_A_df)
Q_A_df
# they are linear related when they were logged
ggplot(Q_A_df, aes(log(drainage_area), y = log(Q5))) + geom_point()
ggplot(Q_A_df, aes(log(drainage_area), y = log(Q95))) + geom_point()
psi <- function(x, c = 1) {
return (
ifelse(
abs(x) > c,
2 * c * abs(x) - c^2,
x^2
)
)
}
r_squared <- function(preds, actual){
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
return(rsq)
}
mean_psi_regression_q5 <- function(b, data, c = 1) {
b1 = b[1]
b2 = b[2]
Y = data$Q5
X = data$drainage_area
return( mean ( psi( log(Y) - (b1 + b2 * log(X) ), c ) ) )
}
mean_psi_regression_q95 <- function(b, data, c = 1) {
b1 = b[1]
b2 = b[2]
Y = data$Q95
X = data$drainage_area
return( mean ( psi( log(Y) - (b1 + b2 * log(X) ), c ) ) )
}
best_q5 = optim(par = c(0,0), mean_psi_regression_q5, data = Q_A_df, c= 1)
(best_q5)
best_q95 <- optim(par = c(0,0), mean_psi_regression_q95, data = Q_A_df, c = 1)
(best_q95)
best_q5$value
actual_orig_q5 <- log(Q_A_df['Q5'])
predicts_orig_q5 <- best_q5$par[1] + best_q5$par[2] * log(Q_A_df['drainage_area'])
r2_orig_q5 <- r_squared(preds = predicts_orig_q5$drainage_area, actual = actual_orig_q5$Q5)
r2_orig_q5
actual_orig_q95 <- log(Q_A_df['Q95'])
predicts_orig_q95 <- best_q95$par[1] + best_q95$par[2] * log(Q_A_df['drainage_area'])
r2_orig_q95 <- r_squared(preds = predicts_orig_q95$drainage_area, actual = actual_orig_q95$Q95)
r2_orig_q95
# Bootstrap
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample_q5 <- numeric(M)
b1_bootstrap_sample_q5 <- numeric(M)
b0_bootstrap_sample_q95 <- numeric(M)
b1_bootstrap_sample_q95 <- numeric(M)
r2_q5 <- numeric(M)
r2_q95 <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- Q_A_df[bootstrap_sample_idx, ]
b_psi_GD_q5 <- optim(c(0, 0), mean_psi_regression_q5, data = bstp)
b_psi_GD_q95 <- optim(c(0, 0), mean_psi_regression_q95, data = bstp)
b0_bootstrap_sample_q5[m] <- b_psi_GD_q5$par[1]
b1_bootstrap_sample_q5[m] <- b_psi_GD_q5$par[2]
actual_q5 <- log(bstp['Q5'])
predicts_q5 <- b0_bootstrap_sample_q5[m] + b1_bootstrap_sample_q5[m] * log(bstp['drainage_area'])
r2_q5[m] <- r_squared(preds = predicts_q5$drainage_area, actual = actual_q5$Q5)
b0_bootstrap_sample_q95[m] <- b_psi_GD_q95$par[1]
b1_bootstrap_sample_q95[m] <- b_psi_GD_q95$par[2]
actual_q95 <- log(bstp['Q95'])
predicts_q95 <- b0_bootstrap_sample_q95[m] + b1_bootstrap_sample_q95[m] * log(bstp['drainage_area'])
r2_q95[m] <- r_squared(preds = predicts_q95$drainage_area, actual = actual_q95$Q95)
}
q5_plt1 <- ggplot(data.frame(b0_bootstrap_sample_q5), aes(b0_bootstrap_sample_q5)) +
geom_histogram(aes(y = ..density..), binwidth = 0.02)
q5_plt2 <- ggplot(data.frame(b1_bootstrap_sample_q5), aes(b1_bootstrap_sample_q5)) +
geom_histogram(aes(y = ..density..), binwidth = 0.02)
mean(b0_bootstrap_sample_q5)
mean(b1_bootstrap_sample_q5)
q5_plt1
q5_plt2
alpha <- 0.05
q5_bootstrap_CI_0 <- quantile(b0_bootstrap_sample_q5, c(alpha/2, 1 - alpha/2))
q5_bootstrap_CI_1 <- quantile(b1_bootstrap_sample_q5, c(alpha/2, 1 - alpha/2))
q5_plt1 + geom_vline(xintercept = q5_bootstrap_CI_0, col = "blue")
q5_plt2 + geom_vline(xintercept = q5_bootstrap_CI_1, col = "blue")
q95_plt1 <- ggplot(data.frame(b0_bootstrap_sample_q95), aes(b0_bootstrap_sample_q95)) +
geom_histogram(aes(y = ..density..), binwidth = 0.02)
q95_plt2 <- ggplot(data.frame(b1_bootstrap_sample_q95), aes(b1_bootstrap_sample_q95)) +
geom_histogram(aes(y = ..density..), binwidth = 0.02)
mean(b0_bootstrap_sample_q95)
mean(b1_bootstrap_sample_q95)
q95_plt1
q95_plt2
alpha <- 0.05
q95_bootstrap_CI_0 <- quantile(b0_bootstrap_sample_q95, c(alpha/2, 1 - alpha/2))
q95_bootstrap_CI_1 <- quantile(b1_bootstrap_sample_q95, c(alpha/2, 1 - alpha/2))
q95_plt1 + geom_vline(xintercept = q95_bootstrap_CI_0, col = "blue")
q95_plt2 + geom_vline(xintercept = q95_bootstrap_CI_1, col = "blue")
rsq_q5_plt <- ggplot(data.frame(r2_q5), aes(r2_q5)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q95_plt <- ggplot(data.frame(r2_q95), aes(r2_q95)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q5_plt
rsq_q95_plt
alpha <- 0.05
q5_r_squared <- quantile(r2_q5, c(alpha/2, 1 - alpha/2))
q95_r_squared <- quantile(r2_q95, c(alpha/2, 1 - alpha/2))
rsq_q5_plt + geom_vline(xintercept = q5_r_squared, col = "blue")
rsq_q95_plt + geom_vline(xintercept = q95_r_squared, col = "blue")
new_df = Q_A_df %>%
mutate(log_darea = log(drainage_area)) %>%
mutate(logQ5 = log(Q5)) %>%
mutate(logQ95 = log(Q95)) %>%
# mutate(logQ5_predicted_mean_optim =  best$par[1] + best$par[2] * log_darea) %>%
mutate(logQ5_predicted_mean =  mean(b0_bootstrap_sample_q5) + mean(b1_bootstrap_sample_q5) * log_darea)  %>%
# mutate(logQ95_predicted_mean_optim =  best$par[1] + best$par[2] * log_darea) %>%
mutate(logQ95_predicted_mean =  mean(b0_bootstrap_sample_q95) + mean(b1_bootstrap_sample_q95) * log_darea) %>%
mutate(logQ5_predicted_25 =  mean(q5_bootstrap_CI_0[1]) + mean(q5_bootstrap_CI_1[1]) * log_darea) %>%
mutate(logQ5_predicted_975 =  mean(q5_bootstrap_CI_0[2]) + mean(q5_bootstrap_CI_1[2]) * log_darea) %>%
mutate(logQ95_predicted_25 =  mean(q95_bootstrap_CI_0[1]) + mean(q95_bootstrap_CI_1[1]) * log_darea) %>%
mutate(logQ95_predicted_975 =  mean(q95_bootstrap_CI_0[2]) + mean(q95_bootstrap_CI_1[2]) * log_darea)
q5_reg_plots <- ggplot(data = new_df, aes(x = log_darea, y = logQ5)) +
geom_point() +
# geom_line(data = new_df, aes(x = log_darea, y = logQ5_predicted_mean_optim), color = 'red') +
geom_line(data = new_df, aes(x = log_darea, y = logQ5_predicted_mean), color = 'green') +
geom_line(data = new_df, aes(x = log_darea, y = logQ5_predicted_25), color = 'blue') +
geom_line(data = new_df, aes(x = log_darea, y = logQ5_predicted_975), color = 'blue')
q5_reg_plots
q95_reg_plots <- ggplot(data = new_df, aes(x = log_darea, y = logQ95)) +
geom_point() +
# geom_line(data = new_df, aes(x = log_darea, y = logQ5_predicted_mean_optim), color = 'red') +
geom_line(data = new_df, aes(x = log_darea, y = logQ95_predicted_mean), color = 'green') +
geom_line(data = new_df, aes(x = log_darea, y = logQ95_predicted_25), color = 'blue') +
geom_line(data = new_df, aes(x = log_darea, y = logQ95_predicted_975), color = 'blue')
q95_reg_plots
View(rsq_q5_plt)
rsq_q5
# Bootstrap
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample_q5 <- numeric(M)
b1_bootstrap_sample_q5 <- numeric(M)
b0_bootstrap_sample_q95 <- numeric(M)
b1_bootstrap_sample_q95 <- numeric(M)
r2_q5 <- numeric(M)
r2_q95 <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- Q_A_df[bootstrap_sample_idx, ]
b_psi_GD_q5 <- optim(c(0, 0), mean_psi_regression_q5, data = bstp)
b_psi_GD_q95 <- optim(c(0, 0), mean_psi_regression_q95, data = bstp)
b0_bootstrap_sample_q5[m] <- b_psi_GD_q5$par[1]
b1_bootstrap_sample_q5[m] <- b_psi_GD_q5$par[2]
actual_q5 <- log(bstp['Q5'])
predicts_q5 <- b0_bootstrap_sample_q5[m] + b1_bootstrap_sample_q5[m] * log(bstp['drainage_area'])
r2_q5[m] <- r_squared(preds = predicts_q5$drainage_area, actual = actual_q5$Q5)
b0_bootstrap_sample_q95[m] <- b_psi_GD_q95$par[1]
b1_bootstrap_sample_q95[m] <- b_psi_GD_q95$par[2]
actual_q95 <- log(bstp['Q95'])
predicts_q95 <- b0_bootstrap_sample_q95[m] + b1_bootstrap_sample_q95[m] * log(bstp['drainage_area'])
r2_q95[m] <- r_squared(preds = predicts_q95$drainage_area, actual = actual_q95$Q95)
}
rsq_q95
r2_q95
q_df
head(q_df)
ggplot(data = q_df, aes(x = Date, y = Qobs)) +
geom_line()
head(validate_q)
ggplot(data = q_df, aes(x = Date, y = Qobs)) +
geom_line(aes(x = Date, y = Qobs), color = 'black') +
geom_line(data = validate_q, aes(x = Date, y = X_00060_00003))
ggplot(data = q_df, aes(x = Date, y = Qobs)) +
geom_line(aes(x = Date, y = Qobs), color = 'black') +
geom_line(data = validate_q, aes(x = Date, y = X_00060_00003, color = 'red'))
ggplot(data = q_df, aes(x = Date, y = Qobs)) +
geom_line(aes(x = Date, y = Qobs), color = 'black')
# they are linear related when they were logged
ggplot(Q_A_df, aes(log(drainage_area), y = log(Q5))) + geom_point()
# they are linear related when they were logged
ggplot(Q_A_df, aes(log(drainage_area), y = Q5)) + geom_point()
# they are linear related when they were logged
ggplot(Q_A_df, aes(log(drainage_area), y = log(Q5))) + geom_point()
sample(10, replace = True)
sample(10, replace = TRUE)
sample(10, replace = TRUE)
sample(10, replace = TRUE)
sample(10, replace = TRUE)
sample(10, replace = TRUE)
sample(10, replace = TRUE)
rsq_q5_plt <- ggplot(data.frame(r2_q5), aes(r2_q5)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q95_plt <- ggplot(data.frame(r2_q95), aes(r2_q95)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q5_plt
rsq_q95_plt
alpha <- 0.05
q5_r_squared <- quantile(r2_q5, c(alpha/2, 1 - alpha/2))
q95_r_squared <- quantile(r2_q95, c(alpha/2, 1 - alpha/2))
rsq_q5_plt + geom_vline(xintercept = q5_r_squared, col = "blue")
rsq_q95_plt + geom_vline(xintercept = q95_r_squared, col = "blue")
rsq_q5_plt <- ggplot(data.frame(r2_q5), aes(r2_q5)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q95_plt <- ggplot(data.frame(r2_q95), aes(r2_q95)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q5_plt
rsq_q95_plt
alpha <- 0.05
q5_r_squared <- quantile(r2_q5, c(alpha/2, 1 - alpha/2))
q95_r_squared <- quantile(r2_q95, c(alpha/2, 1 - alpha/2))
rsq_q5_plt + geom_vline(xintercept = q5_r_squared, col = "blue") + geom_line(xintercept = r2_orig_q5, col = "red")
rsq_q5_plt <- ggplot(data.frame(r2_q5), aes(r2_q5)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q95_plt <- ggplot(data.frame(r2_q95), aes(r2_q95)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q5_plt
rsq_q95_plt
alpha <- 0.05
q5_r_squared <- quantile(r2_q5, c(alpha/2, 1 - alpha/2))
q95_r_squared <- quantile(r2_q95, c(alpha/2, 1 - alpha/2))
rsq_q5_plt + geom_vline(xintercept = q5_r_squared, col = "blue") + geom_line(data = data.frame(r2_orig_q5), xintercept = r2_orig_q5, col = "red")
head(data.frame(r2_orig_q5))
rsq_q5_plt <- ggplot(data.frame(r2_q5), aes(r2_q5)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q95_plt <- ggplot(data.frame(r2_q95), aes(r2_q95)) +   geom_histogram(aes(y = ..density..), binwidth = 0.02)
rsq_q5_plt
rsq_q95_plt
alpha <- 0.05
q5_r_squared <- quantile(r2_q5, c(alpha/2, 1 - alpha/2))
q95_r_squared <- quantile(r2_q95, c(alpha/2, 1 - alpha/2))
rsq_q5_plt + geom_vline(xintercept = q5_r_squared, col = "blue") + geom_vline(xintercept = r2_orig_q5, col = "red")
rsq_q95_plt + geom_vline(xintercept = q95_r_squared, col = "blue") + geom_vline(xintercept = r2_orig_q95, col = "red")
