hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed')
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed', lwd = 2)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed', lwd = 3)
library(truncnorm)
s2 = rtruncnorm(10000, a = 0.5, b = Inf)
mean_s2 = mean(s2)
std_s2 = std(s2)
print(mean_s2)
print(std_s2)
# Calculated from the sample
print(mean(trunc_s))
print(std(trunc_s))
# Calculated from Equation
print(trunc_E)
print(trunc_std)
mean(trunc_s) == mean_s2
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample== mean_s2
# Comparison 2
all.equal(trunc_s, mean_trunc_sample)
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.001
abs(mean_s2 - mean_trunc_sample) < 0.001
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.01
abs(mean_s2 - mean_trunc_sample) < 0.01
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.01
abs(mean_s2 - mean_trunc_sample) < 0.01
mean_s2 - mean_trunc_sample
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.0001
abs(mean_s2 - mean_trunc_sample) < tolerence
a = rnorm(100)
b = rnrom(100)
a = rnorm(100)
b = rnorm(100)
mean(a)
mean(b)
a <- function(s){
len = length(s[s >= 0.3])
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
len(s1)
a <- function(s){
len = length(s[s >= 0.3])
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
a(s1)
a(s2)
a(s3)
a <- function(s){
len = length(s[s >= 0.3])
print(len)
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
a(s1)
a(s2)
a(s3)
vector1 <- c("5", "12", "7", "32")
max(vector1)
sort(vector1)
sum(vector1)
utf8ToInt('1')
utf8ToInt("7")
vector2 <- c("5",7,12)
vector2[2] + vector2[3]
typeof(list4[2])
list4 <- list(z1="6", z2=42, z3="49", z4=126)
list4[[2]]+list4[[4]]
list4[2]+list4[4]
typeof(list4[2])
n = 100
X = rep(1:n, each = 3)
Y = 0.5 + 2 * X + rnorm(100 * 3)
reg_Y_X = lm(Y ~ X)
coefs = coef(reg_Y_X)
y_predict = predict(reg_Y_X)
print(summary(reg_Y_X))
attributes(reg_Y_X)
typeof(reg_Y_X$coefficients)
attributes(reg_Y_X)
is.double(reg_Y_X$coefficients)
is.double(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$effects)
help("coef")
reg_Y_X$coefficients
head(y_predict)
head(reg_Y_X$fitted.values)
reg_Y_X$fitted.values
knitr::opts_chunk$set(echo = TRUE)
s = rnorm(100)
print(typeof(s))
print(dim(s))
print(length(s))
hist(s, freq = FALSE, breaks = 'Sturges')
hist(s, freq = FALSE, breaks = 5) # Too less bin numbers
hist(s, freq = FALSE, breaks = 50) # Too many bins
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
lines(x, dnorm(x), col = 'pink')
s = rnorm(10000) # using more n will better to visuliaze
plot(ecdf(s)) # This is the graph of the CDF of the s
hist(ecdf(s)(x), freq = FALSE, breaks = 100)
s = rnorm(10000)
trunc_s = s[s>=0.5]
hist(trunc_s, probability = TRUE, breaks = 10)
hist(trunc_s, probability = TRUE, breaks = 20)
hist(trunc_s, probability = TRUE, breaks = 100)
library(pracma)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
denominator = 1/std * (1/ sqrt(2 * pi) * exp(-0.5 * ((x-0)/std) ^ 2)) / (1 - (0.5 * (1+erf(a/sqrt(2))) ))
# Plot
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
mu = 0 # parental mu
std = 1 # parental std
a = 0.5
alpha = (a-mu)/std
p_alpha =  1/sqrt(2*pi) * exp(-0.5*alpha) # probability density function at alpha
c_alpha = 0.5 * (1 + erf(alpha/sqrt(2))) # cumulative distribution function at alpha
Z = 1 - c_alpha
trunc_E = mu + std * p_alpha/(Z) # mean
trunc_std = std^2 * (1 + alpha * p_alpha/Z - (p_alpha/Z)^2) # variation
print(trunc_E)
print(trunc_std)
print(mean(trunc_s))
print(std(trunc_s))
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
library(truncnorm)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed', lwd = 3)
library(truncnorm)
s2 = rtruncnorm(10000, a = 0.5, b = Inf)
mean_s2 = mean(s2)
std_s2 = std(s2)
print(mean_s2)
print(std_s2)
# Calculated from the sample
print(mean(trunc_s))
print(std(trunc_s))
# Calculated from Equation
print(trunc_E)
print(trunc_std)
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.0001
abs(mean_s2 - mean_trunc_sample) < tolerence
a = rnorm(100)
b = rnorm(100)
mean(a)
mean(b)
a <- function(s){
len = length(s[s >= 0.3])
print(len)
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
a(s1)
a(s2)
a(s3)
vector1 <- c("5", "12", "7", "32")
max(vector1)
sort(vector1)
sum(vector1)
utf8ToInt('1')
utf8ToInt("7")
vector2 <- c("5",7,12)
vector2[2] + vector2[3]
list4 <- list(z1="6", z2=42, z3="49", z4=126)
list4[[2]]+list4[[4]]
list4[2]+list4[4]
typeof(list4[2])
n = 100
X = rep(1:n, each = 3)
Y = 0.5 + 2 * X + rnorm(100 * 3)
reg_Y_X = lm(Y ~ X)
coefs = coef(reg_Y_X)
y_predict = predict(reg_Y_X)
print(summary(reg_Y_X))
attributes(reg_Y_X)
is.numeric(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$effects)
reg_Y_X$fitted.values
knitr::opts_chunk$set(echo = TRUE)
s = rnorm(100)
print(typeof(s))
print(dim(s))
print(length(s))
hist(s, freq = FALSE, breaks = 'Sturges')
hist(s, freq = FALSE, breaks = 5) # Too less bin numbers
hist(s, freq = FALSE, breaks = 50) # Too many bins
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
lines(x, dnorm(x), col = 'pink')
help(pnorm)
s = rnorm(10000) # using more n will better to visuliaze
plot(pnorm(s)) # This is the graph of the CDF of the s
hist(pnorm, freq = FALSE, breaks = 100)
hist(pnorm(s), freq = FALSE, breaks = 100)
s = rnorm(10000) # using more n will better to visuliaze
hist(pnorm(s), freq = FALSE, breaks = 100)
s = rnorm(10000) # using more n will better to visuliaze
hist(pnorm(s), freq = FALSE, breaks = 50)
s = rnorm(10000) # using more n will better to visuliaze
hist(pnorm(s), freq = FALSE, breaks = 25)
knitr::opts_chunk$set(echo = TRUE)
s = rnorm(100)
print(typeof(s))
print(dim(s))
print(length(s))
hist(s, freq = FALSE, breaks = 'Sturges')
hist(s, freq = FALSE, breaks = 5) # Too less bin numbers
hist(s, freq = FALSE, breaks = 50) # Too many bins
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
lines(x, dnorm(x), col = 'pink')
s = rnorm(10000) # using more n will better to visuliaze
hist(pnorm(s), freq = FALSE, breaks = 25)
s = rnorm(10000)
trunc_s = s[s>=0.5]
hist(trunc_s, probability = TRUE, breaks = 10)
hist(trunc_s, probability = TRUE, breaks = 20)
hist(trunc_s, probability = TRUE, breaks = 100)
library(pracma)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
denominator = 1/std * (1/ sqrt(2 * pi) * exp(-0.5 * ((x-0)/std) ^ 2)) / (1 - (0.5 * (1+erf(a/sqrt(2))) ))
# Plot
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
mu = 0 # parental mu
std = 1 # parental std
a = 0.5
alpha = (a-mu)/std
p_alpha =  1/sqrt(2*pi) * exp(-0.5*alpha) # probability density function at alpha
c_alpha = 0.5 * (1 + erf(alpha/sqrt(2))) # cumulative distribution function at alpha
Z = 1 - c_alpha
trunc_E = mu + std * p_alpha/(Z) # mean
trunc_std = std^2 * (1 + alpha * p_alpha/Z - (p_alpha/Z)^2) # variation
print(trunc_E)
print(trunc_std)
print(mean(trunc_s))
print(std(trunc_s))
library(truncnorm)
mu = 0
std = 1
a = 0.5
x = seq(0.5,3,by=0.05)
trunc_norm_density = dtruncnorm(x, a= a, b = Inf, mean = mu, sd = std)
hist(trunc_s, probability = TRUE, breaks = 10) # Numerator
lines(x, denominator)
lines(x, trunc_norm_density, col = 'blue', lty = 'dashed', lwd = 3)
library(truncnorm)
s2 = rtruncnorm(10000, a = 0.5, b = Inf)
mean_s2 = mean(s2)
std_s2 = std(s2)
print(mean_s2)
print(std_s2)
# Calculated from the sample
print(mean(trunc_s))
print(std(trunc_s))
# Calculated from Equation
print(trunc_E)
print(trunc_std)
mean_trunc_sample= mean(trunc_s)
# Comparison 1
mean_trunc_sample == mean_s2
# Comparison 2
all.equal(mean_s2, mean_trunc_sample)
# Comparison 3
tolerence = 0.0001
abs(mean_s2 - mean_trunc_sample) < tolerence
a = rnorm(100)
b = rnorm(100)
mean(a)
mean(b)
a <- function(s){
len = length(s[s >= 0.3])
print(len)
}
s1 = rnorm(1000)
s2 = rnorm(1000)
s3 = rnorm(1000)
a(s1)
a(s2)
a(s3)
vector1 <- c("5", "12", "7", "32")
max(vector1)
sort(vector1)
# sum(vector1)
utf8ToInt('1')
utf8ToInt("7")
vector2 <- c("5",7,12)
#vector2[2] + vector2[3]
list4 <- list(z1="6", z2=42, z3="49", z4=126)
list4[[2]]+list4[[4]]
#list4[2]+list4[4]
typeof(list4[2])
n = 100
X = rep(1:n, each = 3)
Y = 0.5 + 2 * X + rnorm(100 * 3)
reg_Y_X = lm(Y ~ X)
coefs = coef(reg_Y_X)
y_predict = predict(reg_Y_X)
print(summary(reg_Y_X))
attributes(reg_Y_X)
is.numeric(reg_Y_X$coefficients)
is.numeric(reg_Y_X$residuals)
is.numeric(reg_Y_X$effects)
reg_Y_X$fitted.values
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
#lines(x, dnorm(x), col = 'pink')
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
lines(x, theoretical_density, col = 'red')
# lines(x, dnorm(x), col = 'pink')
x = seq(-3,3,by=0.05)
hist(s, probability = TRUE, xlim = c(-3,3))
# Calculate the theoretical density
mu = 0
std= 1
theoretical_density = exp(-(x-mu)^2/(2*(std)^2))/(std * sqrt(2  * pi))
#lines(x, theoretical_density, col = 'red')
lines(x, dnorm(x), col = 'red')
help(dnorm)
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
my_geom = function(N, p = 0.5){
counters = numeric(N)
for (i in 1:N){
counter = 0
u = runif(1)
while (u > p){
counter = counter + 1
u = runif(1)
}
counters[i] = counter
}
return(counters)
}
s1 = my_geom(100000, p = 0.5)
s2 = rgeom(100000, prob = 0.5)
ggplot(data.frame(s1), aes(s1)) +
geom_histogram(bins = 20, aes(y = ..density..)) +
#geom_density()
# geom_line(aes(y = dgeom(s1, 0.5)))
geom_line(aes(y = dgeom(s1, 0.5)))
library(ggplot2)
install.packages("ggplot2")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("lubridate")
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("ggplot2")
library(tidyverse)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMassachusetts/2022Fall_Courses/Statistical_computing/FP/STAT535")
