for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b1_sample[m] <- b_psi_GD$par[1]
b2_sample[m] <- b_psi_GD$par[2]
}
set.seed(99)
n <- nrow(cats)
M <- 10000
b1_bootstrap_sample <- numeric(M)
b2_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b1_bootstrap_sample[m] <- b_psi_GD$par[1]
b2_bootstrap_sample[m] <- b_psi_GD$par[2]
}
ggplot(data.frame(b1_sample), aes(b1_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5)
set.seed(99)
n <- nrow(cats)
M <- 10000
b1_bootstrap_sample <- numeric(M)
b2_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b1_bootstrap_sample[m] <- b_psi_GD$par[1]
b2_bootstrap_sample[m] <- b_psi_GD$par[2]
}
ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5)
ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
ggplot(data.frame(b2_bootstrap_sample), aes(b2_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
n <- 10000   # to increase accuracy of MC sample, increase the sample size; control se
x <- runif(n, min = 0, max = 2)
y_sample <- 2 * (cos(x*(2-x))) / (3-x^2+x^(1/3))
(mc_estimate <- mean(y_sample))
(mc_se <-  sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
make_normal_interval <- function(smpl, alpha) {
return( mean(smpl) + c(-1, 1) * qnorm(1 - alpha / 2) * sd(smpl) / sqrt(length(smpl)) )
}
n <- 10000   # to increase accuracy of MC sample, increase the sample size; control se
x <- runif(n, min = 0, max = 2)
y_sample <- 2 * (cos(x*(2-x))) / (3-x^2+x^(1/3))
(mc_estimate <- mean(y_sample))
(mc_se <-  sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return(cos(x*(2-x))/(3-x^2+x^(1/3)))
}
integrate(y_function, 0, 2)
set.seed(99)
n <- nrow(cats)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
library(ggplot2)
plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
mean(b0_bootstrap_sample)
mean(b1_bootstrap_sample)
plt1
plt2
sd(b0_bootstrap_sample)
sd(b1_bootstrap_sample)
alpha <- 0.05
(bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2)))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
(bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2)))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
alpha <- 0.05
bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
make_normal_interval <- function(smpl, alpha) {
return( mean(smpl) + c(-1, 1) * qnorm(1 - alpha / 2) * sd(smpl) / sqrt(length(smpl)) )
}
n <- 10000   # to increase accuracy of MC sample, increase the sample size; control se
x <- runif(n, min = 0, max = 2)
y_sample <- 2 * (cos(x*(2-x))) / (3-x^2+x^(1/3))
(mc_estimate <- mean(y_sample))
(mc_se <-  sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return(cos(x*(2-x))/(3-x^2+x^(1/3)))
}
integrate(y_function, 0, 2)
n <- 10000
x <- rgamma(n, shape = 5, rate = 1/4)
y_sample <- ((12 * sqrt(pi)*(4) ^ 5) )/ (1 + x + sqrt(x))
(mc_estimate <- mean(y_sample))
(mc_se <- sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return((x ^4 * exp(-x / 4)) / (1 + x + sqrt(x)))
}
integrate(y_function, 0, Inf)
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$Bwt
Y = data$Hwt
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = cats)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
set.seed(99)
n <- nrow(cats)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
library(ggplot2)
plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
mean(b0_bootstrap_sample)
mean(b1_bootstrap_sample)
plt1
plt2
sd(b0_bootstrap_sample)
sd(b1_bootstrap_sample)
alpha <- 0.05
bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$Bwt
Y = data$Hwt
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = cats)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
make_normal_interval <- function(smpl, alpha) {
return( mean(smpl) + c(-1, 1) * qnorm(1 - alpha / 2) * sd(smpl) / sqrt(length(smpl)) )
}
n <- 10000   # to increase accuracy of MC sample, increase the sample size; control se
x <- runif(n, min = 0, max = 2)
y_sample <- 2 * (cos(x*(2-x))) / (3-x^2+x^(1/3))
(mc_estimate <- mean(y_sample))
(mc_se <-  sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return(cos(x*(2-x))/(3-x^2+x^(1/3)))
}
integrate(y_function, 0, 2)
n <- 10000
x <- rgamma(n, shape = 5, rate = 1/4)
y_sample <- ((12 * sqrt(pi)*(4) ^ 5) )/ (1 + x + sqrt(x))
(mc_estimate <- mean(y_sample))
(mc_se <- sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return((x ^4 * exp(-x / 4)) / (1 + x + sqrt(x)))
}
integrate(y_function, 0, Inf)
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$Bwt
Y = data$Hwt
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = cats)
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
psi <- function(x, c = 1) {
return (
ifelse(
abs(x) > c,
2 * c * abs(x) - cË†2,
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
psi <- function(x, c = 1) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$Bwt
Y = data$Hwt
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = cats)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
make_normal_interval <- function(smpl, alpha) {
return( mean(smpl) + c(-1, 1) * qnorm(1 - alpha / 2) * sd(smpl) / sqrt(length(smpl)) )
}
n <- 10000   # to increase accuracy of MC sample, increase the sample size; control se
x <- runif(n, min = 0, max = 2)
y_sample <- 2 * (cos(x*(2-x))) / (3-x^2+x^(1/3))
(mc_estimate <- mean(y_sample))
(mc_se <-  sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return(cos(x*(2-x))/(3-x^2+x^(1/3)))
}
integrate(y_function, 0, 2)
n <- 10000
x <- rgamma(n, shape = 5, rate = 1/4)
y_sample <- ((12 * sqrt(pi)*(4) ^ 5) )/ (1 + x + sqrt(x))
(mc_estimate <- mean(y_sample))
(mc_se <- sd(y_sample) / sqrt(n))
(mc_CI <- make_normal_interval(y_sample, 0.05))
# We can compare the results to a numerical quadrature integration:
y_function <- function(x) {
return((x ^4 * exp(-x / 4)) / (1 + x + sqrt(x)))
}
integrate(y_function, 0, Inf)
cats <- MASS::cats
female_cats <- cats[cats$Sex == "F", ]
male_cats <- cats[cats$Sex == "M", ]
psi <- function(x, c = 1) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$Bwt
Y = data$Hwt
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = cats)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
set.seed(99)
n <- nrow(cats)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- cats[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
library(ggplot2)
plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
mean(b0_bootstrap_sample)
mean(b1_bootstrap_sample)
plt1
plt2
sd(b0_bootstrap_sample)
sd(b1_bootstrap_sample)
alpha <- 0.05
bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
install.packages('rvest')
install.packages('rvest')
library(rvest)
simple
simple <- read_html("https://dataquestio.github.io/web-scraping-pages/simple.html")
simple
simple <- read_html("https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00065&period=P7D")
simple
simple <- read_html("https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00065&period=P7D")
# html_nodes('.temp') %>%
#   html_text()
simple
simple <- read_html("https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00065&period=P7D")
# html_nodes('.temp') %>%
#   html_text()
simple %>%
html_nodes("p") %>%
html_text()
simple <- read_html("https://waterdata.usgs.gov/nwis/uv?site_no=08324000&legacy=1")
# html_nodes('.temp') %>%
#   html_text()
simple %>%
html_nodes("p") %>%
html_text()
simple <- read_html("https://waterdata.usgs.gov/nwis/uv?site_no=08324000&legacy=1")
# html_nodes('.temp') %>%
#   html_text()
simple %>%
html_nodes("p") %>%
html_text()
link <- "https://waterdata.usgs.gov/nwis/uv?site_no=08324000&legacy=1"
simple <- read_html(link)%>%
html_nodes('.lister-item-header a')
html_nodes('.lister-item-header a')
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)#%>%
q_page <- read_html(link)#%>%
html_nodes('..usa-accordion__content')
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)#%>%
html_nodes('div#site-data-summary-container')
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('div#site-data-summary-container')
#   html_text()
simple %>%
html_nodes("p") %>%
html_text()
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('.usa-accordion+.usa-accordion, .usa-accordion+.usa-accordion--bordered')
#   html_text()
simple %>%
html_nodes("p") %>%
html_text()
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('.usa-accordion+.usa-accordion, .usa-accordion+.usa-accordion--bordered')
#   html_text()
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('.usa-accordion+.usa-accordion, .usa-accordion+.usa-accordion--bordered')
#   html_text()
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('.usa-accordion+.usa-accordion, .usa-accordion+.usa-accordion--bordered') %>%
html_text()
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table#site-summary.usa-table') %>%
html_text()
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table#site-summary.usa-table') %>%
html_table()
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table#site-summary.usa-table') %>%
html_table() %>% .
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table#site-summary.usa-table') %>%
html_table() %>% .[[1]]
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table') #%>%
#html_table() %>% .[[1]]
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table') %>% .[2]
#html_table() %>% .[[1]]
q_page
link <- "https://waterdata.usgs.gov/monitoring-location/08324000/#parameterCode=00060&period=P7D"
q_page <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table() %>% .[[1]]
q_page
no <- 08324000
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]]
q_page
site_no <- '06090800'
strt_date <- 2005-01-01
link <- paste0("https://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites=",site_no, '&startDT=', strt_date)
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]]
site_no <- '06090800'
strt_date <- '2005-01-01'
link <- paste0("https://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites=",site_no, '&startDT=', strt_date)
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]]
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]]
q_page
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]] %>% Metadata Element
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[1]%>%
html_table() %>% .[[1]]
drainage_area
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table() %>% .[[1]]
drainage_area
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table()
drainage_area
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table()
drainage_area['Metadata Element']
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table() %>% .[[1]]
drainage_area['Metadata Element']
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table() %>% .[[1]]
drainage_area['Metadata Element']['Drainage area']
site_no <- '08324000'
link <- paste0("https://waterdata.usgs.gov/monitoring-location/", site_no, "/#parameterCode=00060&period=P7D")
(link)
drainage_area <- read_html(link)%>%
html_nodes('table') %>% .[2]%>%
html_table() %>% .[[1]]
drainage_area['Metadata Element','Drainage area']
devtools::install_github('tanerumit/hydrosystems')
library(hydrosystems)
