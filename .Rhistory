get_discharge_data <- function(site_no, q_code, start, end) {
# Build the url link
url <- paste0('https://waterdata.usgs.gov/nwis/dv?cb_',
q_code,
'=on&format=html&site_no=',
site_no,
'&legacy=&re[â€¦]module=sw&period=&begin_date=',
start,
'&end_date=',
end)
q_data <- readLines(url)
# Select lines which contains the data
table_pattern <- '<tr align="center"><td nowrap="nowrap">'
q_table <- str_subset(q_data, table_pattern)
# Extract dates and flow(ft3/s) from each line
dates = as.Date(unlist(str_match_all(q_table, "[0-9]*/[0-9]*/[0-9]*")), "%m/%d/%Y")
flows = unlist(str_match_all(q_table, "<span>.*</span>"))
flows = as.numeric(str_replace_all(flows, "</?span>", ""))
# Put dates and flow together as a matrix
Q_df = data.frame(
Date = dates,
Qobs = flows
)
return(Q_df)
}
get_drainage_area = function(site_no){
# Scrape the drainage area
url2 <- paste0('https://waterdata.usgs.gov/nwis/inventory/?site_no=',
site_no,
'&agency_cd=USGS')
d_data <- readLines(url2)
d_pattern <- "^.*Drainage area"
d_line <- str_subset(d_data,d_pattern)
darea <- unique(unlist(str_extract_all(d_line, "[0-9]*\\.?[0-9]*")))[2]
darea <- as.numeric(darea)
return(darea)
}
# Specify the inputs: gauge number, q_code is fixed, start date and end date
site_no <- '08324000'
q_code <- '00060'
start <- '2000-01-01'
end <- '2020-12-31'
# Use the function we have to scrape
q_df <- get_discharge_data(site_no, q_code, start, end)
# Get authentic streamflow data using the package
validate_q <- readNWISdv(siteNumber = site_no, parameterCd = q_code,
start, end)
# Calculate the error between scraped data and the true data
scrape_error = q_df$Qobs - validate_q$X_00060_00003
plot(q_df$Date, scrape_error)
# Specify the inputs: gauge number, q_code is fixed, start date and end date
site_no <- '08324000'
q_code <- '00060'
start <- '2000-01-01'
end <- '2020-12-31'
# Use the function we have to scrape
q_df <- get_discharge_data(site_no, q_code, start, end)
# Get authentic streamflow data using the package
validate_q <- readNWISdv(siteNumber = site_no, parameterCd = q_code,
start, end)
# Calculate the error between scraped data and the true data
scrape_error = q_df$Qobs - validate_q$X_00060_00003
plot(q_df$Date, scrape_error)
# Load the site list
site_list <- readLines("gauges_Mass.txt")
setwd("D:/UMASS_AMHERST/UMASS_FALL_2022/STAT535_STATISTICAL_COMPUTING/Meelisha_repository")
# Note: not all the site have a validate
# 0 drainage area meant no data avaliable
gauges_area = read.csv("drainage_area.txt", colClasses = c("character", "numeric"))
# Filter gauges which do not have the drainage area data
gauges_area <- gauges_area %>%
filter(drainage_area > 0)
gauges_area
# Note: not all the gauges have enough streamflow data
site_list <- character()
Q5s <- numeric()
Q50s <- numeric()
Q95s <- numeric()
for (site_no in gauges_area$site_no){
flow_df <- read.csv(paste0("streamflows/",
site_no, ".csv")
)
# check how many data in the data
if (nrow(flow_df) <= (15 * 365)){
# if less 2 years data were scraped
# go to next gauge
print(paste0("Less than 2 years in the site:", site_no))
}else{
# more than 2 years data were scraped
# the gauge would be saved into the site_list
# save the site no
site_list = c(site_list, site_no)
# Calculate the statistics
Q5 = unname(quantile(x = flow_df$Qobs, probs = c(.95), na.rm = TRUE))
Q50 = unname(quantile(x = flow_df$Qobs, probs = c(.5), na.rm = TRUE))
Q95 = unname(quantile(x = flow_df$Qobs, probs = c(.05), na.rm = TRUE))
# save the statistics
Q5s = c(Q5s, Q5)
Q50s = c(Q50s, Q50)
Q95s = c(Q95s, Q95)
}
}
# Note: not all the gauges have enough streamflow data
site_list <- character()
Q5s <- numeric()
Q50s <- numeric()
Q95s <- numeric()
for (site_no in gauges_area$site_no){
flow_df <- read.csv(paste0("streamflows/",
site_no, ".csv")
)
# check how many data in the data
if (nrow(flow_df) <= (15 * 365)){
# if less 2 years data were scraped
# go to next gauge
print(paste0("Less than 15 years in the site:", site_no))
}else{
# more than 2 years data were scraped
# the gauge would be saved into the site_list
# save the site no
site_list = c(site_list, site_no)
# Calculate the statistics
Q5 = unname(quantile(x = flow_df$Qobs, probs = c(.95), na.rm = TRUE))
Q50 = unname(quantile(x = flow_df$Qobs, probs = c(.5), na.rm = TRUE))
Q95 = unname(quantile(x = flow_df$Qobs, probs = c(.05), na.rm = TRUE))
# save the statistics
Q5s = c(Q5s, Q5)
Q50s = c(Q50s, Q50)
Q95s = c(Q95s, Q95)
}
}
# The dataframe is based on the gauge area dataframe
Q_A_df = gauges_area %>%
filter(site_no %in% site_list) %>%
mutate(Q5 = Q5s) %>%
mutate(Q50 = Q50s) %>%
mutate(Q95 = Q95s)
Q_A_df
View(Q_A_df)
psi <- function(x, c = 1) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = Q_A_df)
psi <- function(x, c = 1) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(10, 10), mean_psi_regression_helper,data = Q_A_df)
par(mar = c(0, 0, 0, 0))
plot(imager::load.image("Lecture8-2_img_optim.png"), axes = FALSE)
# The dataframe is based on the gauge area dataframe
Q_A_df = gauges_area %>%
filter(site_no %in% site_list) %>%
mutate(Q5 = Q5s) %>%
mutate(Q50 = Q50s) %>%
mutate(Q95 = Q95s)
Q_A_df = drop_na(Q_A_df)
psi <- function(x, c = 1) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = Q_A_df)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = Q_A_df)
(b_psi_GD$par[1])
(b_psi_GD$par[2])
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( Y - ( b[1] + b[2] * log(X)), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- cats[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- Q_A_df[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * X), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- Q_A_df[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
library(ggplot2)
plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
mean(b0_bootstrap_sample)
mean(b1_bootstrap_sample)
plt1
plt2
alpha <- 0.05
bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * log(X)), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
# for (m in 1:M) {
#   bootstrap_sample_idx <- sample(n, replace = TRUE)
#   bstp <- Q_A_df[bootstrap_sample_idx, ]
#   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
#   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
#   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# }
#
#
# library(ggplot2)
# plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
#   geom_histogram(aes(y = ..density..), binwidth = 0.2)
#
# plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
#   geom_histogram(aes(y = ..density..), binwidth = 0.2)
# mean(b0_bootstrap_sample)
# mean(b1_bootstrap_sample)
# plt1
# plt2
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * log(X)), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample <- numeric(M)
# b1_bootstrap_sample <- numeric(M)
# # for (m in 1:M) {
# #   bootstrap_sample_idx <- sample(n, replace = TRUE)
# #   bstp <- Q_A_df[bootstrap_sample_idx, ]
# #   b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
# #   b0_bootstrap_sample[m] <- b_psi_GD$par[1]
# #   b1_bootstrap_sample[m] <- b_psi_GD$par[2]
# # }
# #
# #
# # library(ggplot2)
# # plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
# #   geom_histogram(aes(y = ..density..), binwidth = 0.2)
# #
# # plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
# #   geom_histogram(aes(y = ..density..), binwidth = 0.2)
# # mean(b0_bootstrap_sample)
# # mean(b1_bootstrap_sample)
# # plt1
# # plt2
psi <- function(x, c = 1.2) {
return (ifelse(abs(x) > c,2 * c * abs(x) - c^2, x^2 ))
}
mean_psi_regression <- function(b, Y, X, c = 1) {
return( mean ( psi( log(Y) - ( b[1] + b[2] * log(X)), c ) ) )
}
mean_psi_regression_helper <- function(b, data, c = 1){
b0 = b[1]
b1 = b[2]
X = data$drainage_area
Y = data$Q5
return(mean_psi_regression(b = b, Y = Y, X =X, c = c))
}
b_psi_GD <- optim(c(-10, -10), mean_psi_regression_helper,data = Q_A_df)
# (b_psi_GD$par[1])
# (b_psi_GD$par[2])
b_psi_GD
n <- nrow(Q_A_df)
M <- 10000
b0_bootstrap_sample <- numeric(M)
b1_bootstrap_sample <- numeric(M)
for (m in 1:M) {
bootstrap_sample_idx <- sample(n, replace = TRUE)
bstp <- Q_A_df[bootstrap_sample_idx, ]
b_psi_GD <- optim(c(0, 0), mean_psi_regression_helper, data = bstp)
b0_bootstrap_sample[m] <- b_psi_GD$par[1]
b1_bootstrap_sample[m] <- b_psi_GD$par[2]
}
library(ggplot2)
plt1 <- ggplot(data.frame(b0_bootstrap_sample), aes(b0_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
plt2 <- ggplot(data.frame(b1_bootstrap_sample), aes(b1_bootstrap_sample)) +
geom_histogram(aes(y = ..density..), binwidth = 0.2)
mean(b0_bootstrap_sample)
mean(b1_bootstrap_sample)
plt1
plt2
alpha <- 0.05
bootstrap_CI_0 <- quantile(b0_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt2 + geom_vline(xintercept = bootstrap_CI_0, col = "blue")
alpha <- 0.05
bootstrap_CI_1 <- quantile(b1_bootstrap_sample, c(alpha/2, 1 - alpha/2))
plt1 + geom_vline(xintercept = bootstrap_CI_1, col = "blue")
